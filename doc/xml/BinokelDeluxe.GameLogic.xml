<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BinokelDeluxe.GameLogic</name>
    </assembly>
    <members>
        <member name="F:BinokelDeluxe.GameLogic.GameType.ThreePlayerGame">
            <summary>
            A game where three players play against each other.
            </summary>
        </member>
        <member name="F:BinokelDeluxe.GameLogic.GameType.FourPlayerCrossBinokelGame">
            <summary>
            A game where four players play in teams of two against each other.
            </summary>
        </member>
        <member name="F:BinokelDeluxe.GameLogic.CountingType.TenPointsForAceToKing">
            <summary>
            Ten points for aces, tens and kings, zero points for the remainder.
            </summary>
        </member>
        <member name="F:BinokelDeluxe.GameLogic.CountingType.DecreasingPointsForAceToUnter">
            <summary>
            Eleven points for aces, ten for tens, four for kings, 3 for obers, 2 for unters.
            </summary>
        </member>
        <member name="T:BinokelDeluxe.GameLogic.RuleSettings">
            <summary>
            This class contains any setting which affects the game logic.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.GameLogic.RuleSettings.GameType">
            <summary>
            Defines whether three or four player binokel is being played.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.GameLogic.RuleSettings.SevensAreIncluded">
            <summary>
            True if the cards which display a seven shall be included.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.GameLogic.RuleSettings.CountingType">
            <summary>
            Defines the score of each card.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.GameLogic.RuleSettings.ScoresWillBeRounded">
            <summary>
            True if the score for each player/team shall be rounded towards the next multiple of ten.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.GameLogic.RuleSettings.ExtraPointsForOthersWhenGoingOut">
            <summary>
            True if, when one player goes out, all others will receive 10 points per player in addition to their meld.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.GameLogic.RuleSettings.ExtraPointsForSevenOfTrumps">
            <summary>
            True if the seven of trumps can be melded for ten points.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.GameLogic.RuleSettings.ExtraPointsForLastTrickInsteadOfFirst">
            <summary>
            True if the ten points are awarded for winning the last trick, false if ten points are awarded for winning the first trick.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.GameLogic.RuleSettings.SevenOfTrumpsCanBeMeldedAndDiscarded">
            <summary>
            True if the seven of trumps may be discarded despite being melded.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.GameLogic.RuleSettings.BettelsAreAllowed">
            <summary>
            True if a Bettel (attempt to lose all tricks, and gaining 1000 points in case of success) is allowed.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.GameLogic.RuleSettings.SecondTrumpMustAlsoWin">
            <summary>
            True if when player B plays a trump because he cannot follow suit, player C is forced to play a higher trump if he has one and also cannot follow suit.
            If false, player C still needs to play a trump but may play a lower trump than player B.
            </summary>
        </member>
        <member name="M:BinokelDeluxe.GameLogic.RuleSettings.Equals(BinokelDeluxe.GameLogic.RuleSettings)">
            <summary>
            Checks whether this and other are equal.
            Two rule settings objects are equal if all their properties are equal.
            </summary>
            <param name="other">The other object.</param>
            <returns>True if this and other are equal.</returns>
        </member>
        <member name="T:BinokelDeluxe.GameLogic.ISingleGameTriggerSink">
            <summary>
            This interface can be used to send triggers to the internal state machine.
            See https://github.com/Timmeey86/binokel-deluxe/blob/statemachine/doc/modelio/img/08_01_SingleGameStateMachine.png for the used triggers and related transitions.
            </summary>
        </member>
        <member name="T:BinokelDeluxe.GameLogic.UnconnectedEventException">
            <summary>
            Thrown when there is no listener connected to an event.
            Since the state machine will not switch states without anyone sending a trigger, the application would be stuck in that case.
            </summary>
        </member>
        <member name="T:BinokelDeluxe.GameLogic.ISingleGameEventSource">
            <summary>
            Defines events which are sent by the machine whenever it is waiting for a trigger.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.DealingStarted">
            <summary>
            Event listeners should be implemented as follows:
            Start a dealing animation and uncover each player's own cards.
            Send a DealingFinished trigger when done.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.WaitingForFirstBidStarted">
            <summary>
            Event listeners should be implemented as follows:
            Offer the player the choice between placing the initial bid or passing.
            Send a BidPlaced or Passed trigger when done.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.SwitchingPlayerBeforeFirstBidStarted">
            <summary>
            Event listeners should be implemented as follows:
            Switch the current (and the next) player (but do not offer them options yet).
            Send a PlayerSwitched trigger when done.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.WaitingForBidOrPassStarted">
            <summary>
            Event listeners should be implemented as follows:
            Offer the player the choice between placing a bid (the initial one or the previous one +10) and passing.
            Send a BidPlaced or Passed trigger when done.
            Make sure the player cannot accidentally send a trigger twice in this state.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.WaitingForCounterOrPassStarted">
            <summary>
            Event listeners should be implemented as follows:
            Offer the player the choice between countering a bid or passing.
            Send a BidPlaced or Passed trigger when done.
            Make sure the player cannot accidentally send a trigger twice in this state.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.SwitchingCurrentBidPlayerStarted">
            <summary>
            Event listeners should be implemented as follows:
            Switch the current (and the next) player for bidding (but do not offer them options yet).
            Send a PlayerSwitched trigger when done.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.SwitchingCounterBidPlayerStarted">
            <summary>
            Event listeners should be implemented as follows:
            Switch the next player for counter-bidding (but do not offer them options yet).
            Send a PlayerSwitched trigger when done.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.ExchangingCardsWithDabbStarted">
            <summary>
            Event listeners should be implemented as follows:
            Uncover the dabb and wait for confirmation of all players that they have seen it.
            Then, offer the player who won the bid the option to exchange cards with the dabb and give them the following choices:
            - Selecting a trump and playing normally
            - Selecting a trump and going out
            - Announcing a Durch
            - Announcing a Bettel
            Dependent on their choice, send one of the following triggers when done:
            - TrumpSelected
            - GoingOut
            - DurchAnnounced
            - BettelAnnouced
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.CalculatingGoingOutScoreStarted">
            <summary>
            Event listeners should be implemented as follows:
            Calculate the score for each player after the player who won the bid goes out.
            Send a ScoreCalculationFinished trigger when done.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.MeldingStarted">
            <summary>
            Event listeners should be implemented as follows:
            Display the cards which can be melded by each player and display the total meld score for each player.
            Ask every player for confirmation that they saw the melds.
            Send a MeldsSeenByAllPlayers trigger when done.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.TrickTakingStarted">
            <summary>
            Event listeners should be implemented as follows:
            Set every player up for the trick taking phase by showing them only their cards, with nothing in the middle.
            Send a ReadyForTrickTaking trigger when done.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.WaitingForCardStarted">
            <summary>
            Event listeners should be implemented as follows:
            Offer the player the chance to play a card of their choice (including invalid cards).
            Send a CardPlaced trigger when done.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.ValidatingCardStarted">
            <summary>
            Event listeners should be implemented as follows:
            Remove any potential highlighting, then validate the card which was placed by the player.
            In case of a valid card, find out if the card beats the current winning card.
            Send either an InvalidCardPlaced, a WinningCardPlaced or a LosingCardPlaced event when done.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.RevertingInvalidMoveStarted">
            <summary>
            Event listeners should be implemented as follows:
            Revert the last move and highlight the cards which are valid.
            Send a RevertingFinished trigger when done.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.SwitchingCurrentTrickPlayerStarted">
            <summary>
            Event listeners should be implemented as follows:
            Switch to the player which is identified by the player Position in the event arguments (but do not offer them choices yet).
            Send a PlayerSwitched trigger when done.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.StartingNewRoundStarted">
            <summary>
            Event listeners should be implemented as follows:
            Switch to the trick-winning player which is identified by the player Position in the event arguments and remember the cards won by this player.
            Send a NewRoundStarted trigger when done.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.CountingPlayerOrTeamScoresStarted">
            <summary>
            Event listeners should be implemented as follows:
            Calculate the scores for each player or team.
            The player argument identifies the player who won the last trick.
            Send a ScoreCalculationFinished trigger when done.
            </summary>
        </member>
        <member name="E:BinokelDeluxe.GameLogic.ISingleGameEventSource.GameFinished">
            <summary>
            Lets event listeners know that the game was finished and a new one can be started.
            You need to prepare a new game for the next round.
            </summary>
        </member>
        <member name="T:BinokelDeluxe.GameLogic.SingleGameStateBridge">
            <summary>
            This class is the public interface for interacting with the internal state machine. The only access provided is through events and triggers.
            This allows keeping the whole state management an implementation detail which others will not depend on.
            </summary>
        </member>
        <member name="M:BinokelDeluxe.GameLogic.SingleGameStateBridge.PrepareNewGame(BinokelDeluxe.GameLogic.RuleSettings,System.Int32)">
            <summary>
            Prepares a new game using the given settings. This will create a new event source and a new trigger sink.
            </summary>
            <param name="ruleSettings">The rule settings to be used.</param>
            <param name="dealerPosition">The position of the dealer on the table, where 0 is the human player (single player) or the host (multiplayer).</param>
        </member>
        <member name="P:BinokelDeluxe.GameLogic.SingleGameStateBridge.EventSource">
            <summary>
            Retrieves an object which will send events as described in the ISingleGameEventSource interface.
            </summary>
            <returns>The event source.</returns>
        </member>
        <member name="P:BinokelDeluxe.GameLogic.SingleGameStateBridge.TriggerSink">
            <summary>
            Retrieves an object which will process triggers as described in the ISingleGameTriggerSink interface.
            Be sure to call PrepareNewGame before calling this.
            </summary>
            <returns>The trigger sink.</returns>
        </member>
        <member name="T:BinokelDeluxe.GameLogic.SingleGameStateMachine">
            <summary>
            This class manages the central state machine and serves as an event bridge for it.
            This class is an internal namespace class and should not be exposed directly.
            See https://github.com/Timmeey86/binokel-deluxe/wiki/Glossary for the difference between player positions and numbers
            </summary>
        </member>
        <member name="T:BinokelDeluxe.GameLogic.SingleGameStateMachine.SingleGameProperties">
            <summary>
            Stores properties for the current state of a single game.
            </summary>
        </member>
        <member name="M:BinokelDeluxe.GameLogic.SingleGameStateMachine.FireEvent``1(System.EventHandler{``0},``0,System.String)">
            <summary>
            Fires an event which takes event arguments safely. If no event listener is connected, an exception will be thrown.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="eventHandler">The handler of the event.</param>
            <param name="eventArgs">The event arguments.</param>
        </member>
        <member name="M:BinokelDeluxe.GameLogic.SingleGameStateMachine.FireEvent(System.EventHandler,System.String)">
            <summary>
            Fires an event which does not take event arguments safely. If no event listener is connected, an exception will be thrown.
            </summary>
            <param name="eventHandler">The handler of the event.</param>
        </member>
        <member name="M:BinokelDeluxe.GameLogic.SingleGameStateMachine.RefreshStateMachine(BinokelDeluxe.GameLogic.RuleSettings,System.Int32)">
            <summary>
            Creates a state machine for the given rule settings.
            Check https://github.com/Timmeey86/binokel-deluxe/wiki/State-Machines for an overview of possible states and transitions.
            </summary>
            <param name="ruleSettings">The settings for this game.</param>
            <param name="dealerPosition">The Position of the dealing player for this game, starting at zero.</param>
            <returns>A state machine for a single game.</returns>
        </member>
        <member name="T:BinokelDeluxe.GameLogic.SingleGameState">
            <summary>
            See https://github.com/Timmeey86/binokel-deluxe/blob/statemachine/doc/modelio/img/08_01_SingleGameStateMachine.png for a graphical representation of the states.
            </summary>
        </member>
    </members>
</doc>
