<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BinokelDeluxe.Core</name>
    </assembly>
    <members>
        <member name="T:BinokelDeluxe.Core.GameController">
            <summary>
            This class assembles the different parts of the Binokel business logic and controls the work done by these parts.
            Try not doing anything else in this class.
            This class also serves as the primary external interface to the Cross-Platform UI code.
            </summary>
        </member>
        <member name="M:BinokelDeluxe.Core.GameController.#ctor(BinokelDeluxe.UI.IUserInterface)">
            <summary>
            Creates a new game controller for the given user interface. Note: This should best be created and used outside of the UI thread.
            </summary>
            <param name="userInterface">The user interface to be used.</param>
        </member>
        <member name="M:BinokelDeluxe.Core.GameController.StartNewGame(BinokelDeluxe.GameLogic.RuleSettings,System.Collections.Generic.List{System.String})">
            <summary>
            Starts a new game with teh given rules and AI strategies.
            </summary>
            <param name="ruleSettings">The rules for the game.</param>
            <param name="aiStrategyTypes">The strategies for the computer players. Should contain null entries for human players.</param>
        </member>
        <member name="T:BinokelDeluxe.Core.GameCreationInfo">
            <summary>
            Stores information required for creating an identical game.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.Core.GameCreationInfo.Version">
            <summary>
            The version of the game state store/restore mechanism, in case it gets changed in future. This allows for upgrading older saves.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.Core.GameCreationInfo.RandomSeed">
            <summary>
            The random seed which was used to iniitalize the random number generator.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.Core.GameCreationInfo.AIStrategyTypes">
            <summary>
            Contains a type for each player position which is null in case of a human player or an AI Strategy type otherwise.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.Core.GameCreationInfo.RuleSettings">
            <summary>
            The rule settings the game was started with.
            </summary>
        </member>
        <member name="M:BinokelDeluxe.Core.GameCreationInfo.PlayerIsHuman(System.Int32)">
            <summary>
            Checks whether or not a human player is at the given position.
            </summary>
            <param name="playerPosition">The position of the player, where 0 = human player (single player) or host (multiplayer).</param>
            <returns>True if the player is a human player, false if it is an AI player.</returns>
        </member>
        <member name="M:BinokelDeluxe.Core.GameCreationInfo.Equals(BinokelDeluxe.Core.GameCreationInfo)">
            <summary>
            Checks whether or not other is equal to this. Two GameCreationInfo objects are equal if:
            - They have the same version and
            - They have the same random seed and
            - They have the same list of strategy types in the same order and
            - They have equal rule settings.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:BinokelDeluxe.Core.GameStateChangeInfo">
            <summary>
            Stores delta information about a single sate change in case of human interaction. In case of AI interaction, no state change is stored since this can be reproduced automatically.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.Core.GameStateChangeInfo.HumanTrigger">
            <summary>
            The trigger which was used by the human player to initiate the state change (optional).
            </summary>
        </member>
        <member name="P:BinokelDeluxe.Core.GameStateChangeInfo.CardPlayedByHuman">
            <summary>
            The card which was played by the human to trigger the state change (optional).
            </summary>
        </member>
        <member name="T:BinokelDeluxe.Core.GameStateStack">
            <summary>
            Stores information required for recreating and replaying a single game.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.Core.GameStateStack.DeltaChanges">
            <summary>
            Gets or sets a list of delta changes which occurred after the initial state. This is public due to XML Serialization only and should not be accessed directly. This is intended for XML Serializing only.
            </summary>
        </member>
        <member name="P:BinokelDeluxe.Core.GameStateStack.CreationInfo">
            <summary>
            Information required for creating an identical game.
            </summary>
        </member>
        <member name="M:BinokelDeluxe.Core.GameStateStack.Push(BinokelDeluxe.Core.GameStateChangeInfo)">
            <summary>
            Pushes a state entry to the stack.
            </summary>
            <param name="entry">The most recent entry.</param>
        </member>
        <member name="M:BinokelDeluxe.Core.GameStateStack.Pop">
            <summary>
            Retrieves a state entry from the stack and removes it.
            </summary>
            <returns>The entry which used to be on top of the stack.</returns>
        </member>
        <member name="M:BinokelDeluxe.Core.GameStateStack.Peek">
            <summary>
            Retrieves the top entry without removing it.
            </summary>
            <returns>The entry which is currently on top of the stack.</returns>
        </member>
        <member name="M:BinokelDeluxe.Core.GameStateStack.Equals(BinokelDeluxe.Core.GameStateStack)">
            <summary>
            Checks whether or not other is equal to this. Two Game State Stack objects are considered equal if
            - Both are not null and
            - Both have no creation info, or both creation infos are equal (the content, not the references) and
            - Both have no delta changes, or both have the same delta changes in the same order.
            </summary>
            <param name="other">The other object.</param>
            <returns>True if other is equal to this.</returns>
        </member>
    </members>
</doc>
